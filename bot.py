import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    WebAppInfo,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from dotenv import load_dotenv
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏ URL WebApp
BOT_TOKEN = os.getenv("BOT_TOKEN") or '7957287404:AAFvczJbKcoyglv3UTb_Hyw-pdJTN2xfQZ8'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π
WEBAPP_URL = os.getenv("WEBAPP_URL") or 'https://plenty-apes-end.loca.lt'  # HTTPS –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω

if not BOT_TOKEN:
    logger.error("–û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    exit(1)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–æ–π WebApp
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üéÆ –û—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É", web_app=WebAppInfo(url=WEBAPP_URL))]
    ],
    resize_keyboard=True
)

# Inline-–∫–Ω–æ–ø–∫–∞ –¥–ª—è WebApp (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)
web_app_inline_button = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(
            text="‚ñ∂Ô∏è –ò–≥—Ä–∞—Ç—å –≤ MiniApp",
            web_app=WebAppInfo(url=WEBAPP_URL)
        )]
    ]
)

@dp.message(Command("start"))
async def start_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

    # –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å user_id –≤ WebApp —á–µ—Ä–µ–∑ URL (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
    webapp_url_with_user_id = f"{WEBAPP_URL}?tg_user_id={user_id}"

    await message.answer(
        f"üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É, ID {user_id}!\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É –≤ Telegram:",
        reply_markup=main_keyboard
    )
    
    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Å Inline-–∫–Ω–æ–ø–∫–æ–π
    await message.answer(
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å:",
        reply_markup=web_app_inline_button
    )

@dp.message()
async def default_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await message.answer(
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã –∏–ª–∏ /start.",
        reply_markup=main_keyboard
    )

async def main():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
